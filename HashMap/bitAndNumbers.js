
    //  0 0 0 0 0 
    // 16 8 4 2 1
      
//      0 0 0 0 1   = 1
//      0 0 0 1 0   = 2
//      0 0 0 1 1   = 3
//      0 0 1 0 1   = 5
//      0 0 1 0 0   = 4
//      0 0 1 1 0   = 6
//      0 0 1 1 1   = 7
//      0 1 0 0 0   = 8
//      0 1 0 0 1   = 9
//      0 1 0 1 0   = 10
//      0 1 0 1 1   = 11
//      0 1 1 0 0   = 12
//      0 1 1 0 1   = 13
//      0 1 1 1 0   = 14
//      0 1 1 1 1   = 15
//      1 0 0 0 0   = 16 
//      1 0 0 0 1   = 17
//      1 0 0 1 0   = 18
//      1 0 0 1 1   = 19 
//      1 0 1 0 0   = 20
//      1 0 1 0 1   = 21
//      1 0 1 1 0   = 22
//      1 0 1 1 1   = 23
//      1 1 0 0 0   = 24
//      1 1 0 0 1   = 25
//      1 1 0 1 0   = 26
//      1 1 0 1 1   = 27
//      1 1 1 0 0   = 28
//      1 1 1 0 1   = 29
//      1 1 1 1 0   = 30
//      1 1 1 1 1   = 31
//    1 0 0 0 0 0   = 32

//     // 0 0 1 1 1   = 7
//     // 1 1 1 0 0   = 28

//                                          7 << 5

//    1024   512  256  128  64 16  8  4  2  1  = base 2
//      10     9    8    7   6  5  4  3  2  1  = index 
//       0     0    1    1   1  0  0  0  0  0  = 448

//       10000000000000000000000000000000
// 10000000000000000000000000000000
// 11111111111111111111111111111110
function bin_to_dec(bstr) { 
    return parseInt((bstr + '')
    .replace(/[^01]/gi, ''), 2);
}
